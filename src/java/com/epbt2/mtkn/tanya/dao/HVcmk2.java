
/*
Authors: NurMuhammadAfzal & MohammadHafiz

*/

package com.epbt2.mtkn.tanya.dao;


import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * HVcmk2 Value Object.
  * This class is value object representing database table MTKN.HVCMK1, MTKN.HVCMK2, MTKN.HVCMK6, MTKN.HVCMK7, MTKN.HVCMK8
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class HVcmk2 implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private String CMpbksms;
    private String CMpbktgk;
    private String CMnbksms;
    private String CMnbktgk;
    private String CMbbksms;
    private String CMbbktgk;
    private String CMplebh2;
    private String CMnlebh2;
    private String CMblebh2;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public HVcmk2 () {

    }

    public HVcmk2 (String CMpbksmsIn) {

          this.CMpbksms = CMpbksmsIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public String getCMpbksms() {
          return this.CMpbksms;
    }
    public void setCMpbksms(String CMpbksmsIn) {
          this.CMpbksms = CMpbksmsIn;
    }

    public String getCMpbktgk() {
          return this.CMpbktgk;
    }
    public void setCMpbktgk(String CMpbktgkIn) {
          this.CMpbktgk = CMpbktgkIn;
    }

    public String getCMnbksms() {
          return this.CMnbksms;
    }
    public void setCMnbksms(String CMnbksmsIn) {
          this.CMnbksms = CMnbksmsIn;
    }

    public String getCMnbktgk() {
          return this.CMnbktgk;
    }
    public void setCMnbktgk(String CMnbktgkIn) {
          this.CMnbktgk = CMnbktgkIn;
    }

    public String getCMbbksms() {
          return this.CMbbksms;
    }
    public void setCMbbksms(String CMbbksmsIn) {
          this.CMbbksms = CMbbksmsIn;
    }

    public String getCMbbktgk() {
          return this.CMbbktgk;
    }
    public void setCMbbktgk(String CMbbktgkIn) {
          this.CMbbktgk = CMbbktgkIn;
    }

    public String getCMplebh2() {
          return this.CMplebh2;
    }
    public void setCMplebh2(String CMplebh2In) {
          this.CMplebh2 = CMplebh2In;
    }

    public String getCMnlebh2() {
          return this.CMnlebh2;
    }
    public void setCMnlebh2(String CMnlebh2In) {
          this.CMnlebh2 = CMnlebh2In;
    }

    public String getCMblebh2() {
          return this.CMblebh2;
    }
    public void setCMblebh2(String CMblebh2In) {
          this.CMblebh2 = CMblebh2In;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(String CMpbksmsIn,
          String CMpbktgkIn,
          String CMnbksmsIn,
          String CMnbktgkIn,
          String CMbbksmsIn,
          String CMbbktgkIn,
          String CMplebh2In,
          String CMnlebh2In,
          String CMblebh2In) {
          this.CMpbksms = CMpbksmsIn;
          this.CMpbktgk = CMpbktgkIn;
          this.CMnbksms = CMnbksmsIn;
          this.CMnbktgk = CMnbktgkIn;
          this.CMbbksms = CMbbksmsIn;
          this.CMbbktgk = CMbbktgkIn;
          this.CMplebh2 = CMplebh2In;
          this.CMnlebh2 = CMnlebh2In;
          this.CMblebh2 = CMblebh2In;
    }


    /** 
     * hasEqualMapping-method will compare two HVcmk2 instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(HVcmk2 valueObject) {

          if (this.CMpbksms == null) {
                    if (valueObject.getCMpbksms() != null)
                           return(false);
          } else if (!this.CMpbksms.equals(valueObject.getCMpbksms())) {
                    return(false);
          }
          if (this.CMpbktgk == null) {
                    if (valueObject.getCMpbktgk() != null)
                           return(false);
          } else if (!this.CMpbktgk.equals(valueObject.getCMpbktgk())) {
                    return(false);
          }
          if (this.CMnbksms == null) {
                    if (valueObject.getCMnbksms() != null)
                           return(false);
          } else if (!this.CMnbksms.equals(valueObject.getCMnbksms())) {
                    return(false);
          }
          if (this.CMnbktgk == null) {
                    if (valueObject.getCMnbktgk() != null)
                           return(false);
          } else if (!this.CMnbktgk.equals(valueObject.getCMnbktgk())) {
                    return(false);
          }
          if (this.CMbbksms == null) {
                    if (valueObject.getCMbbksms() != null)
                           return(false);
          } else if (!this.CMbbksms.equals(valueObject.getCMbbksms())) {
                    return(false);
          }
          if (this.CMbbktgk == null) {
                    if (valueObject.getCMbbktgk() != null)
                           return(false);
          } else if (!this.CMbbktgk.equals(valueObject.getCMbbktgk())) {
                    return(false);
          }
          if (this.CMplebh2 == null) {
                    if (valueObject.getCMplebh2() != null)
                           return(false);
          } else if (!this.CMplebh2.equals(valueObject.getCMplebh2())) {
                    return(false);
          }
          if (this.CMnlebh2 == null) {
                    if (valueObject.getCMnlebh2() != null)
                           return(false);
          } else if (!this.CMnlebh2.equals(valueObject.getCMnlebh2())) {
                    return(false);
          }
          if (this.CMblebh2 == null) {
                    if (valueObject.getCMblebh2() != null)
                           return(false);
          } else if (!this.CMblebh2.equals(valueObject.getCMblebh2())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass HVcmk2, mapping to table MTKN.HVCMK1, MTKN.HVCMK2, MTKN.HVCMK6, MTKN.HVCMK7, MTKN.HVCMK8\n");
        out.append("Persistent attributes: \n"); 
        out.append("CMpbksms = " + this.CMpbksms + "\n"); 
        out.append("CMpbktgk = " + this.CMpbktgk + "\n"); 
        out.append("CMnbksms = " + this.CMnbksms + "\n"); 
        out.append("CMnbktgk = " + this.CMnbktgk + "\n"); 
        out.append("CMbbksms = " + this.CMbbksms + "\n"); 
        out.append("CMbbktgk = " + this.CMbbktgk + "\n"); 
        out.append("CMplebh2 = " + this.CMplebh2 + "\n"); 
        out.append("CMnlebh2 = " + this.CMnlebh2 + "\n"); 
        out.append("CMblebh2 = " + this.CMblebh2 + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        HVcmk2 cloned = new HVcmk2();

        if (this.CMpbksms != null)
             cloned.setCMpbksms(new String(this.CMpbksms)); 
        if (this.CMpbktgk != null)
             cloned.setCMpbktgk(new String(this.CMpbktgk)); 
        if (this.CMnbksms != null)
             cloned.setCMnbksms(new String(this.CMnbksms)); 
        if (this.CMnbktgk != null)
             cloned.setCMnbktgk(new String(this.CMnbktgk)); 
        if (this.CMbbksms != null)
             cloned.setCMbbksms(new String(this.CMbbksms)); 
        if (this.CMbbktgk != null)
             cloned.setCMbbktgk(new String(this.CMbbktgk)); 
        if (this.CMplebh2 != null)
             cloned.setCMplebh2(new String(this.CMplebh2)); 
        if (this.CMnlebh2 != null)
             cloned.setCMnlebh2(new String(this.CMnlebh2)); 
        if (this.CMblebh2 != null)
             cloned.setCMblebh2(new String(this.CMblebh2)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}