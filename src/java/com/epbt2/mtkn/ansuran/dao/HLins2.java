package com.epbt2.mtkn.ansuran.dao;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * HLins2 Value Object.
  * This class is value object representing database table hlins2
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class HLins2 implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private String in2Akaun;
    private String in2Trikh;
    private String in2Ctsms;
    private String in2Cttgk;
    private String in2Dnsms;
    private String in2Dntgk;
    private String in2Ntsms;
    private String in2Nttgk;
    private String in2Wrsms;
    private String in2Wrtgk;
    private String in2Lnsms;
    private String in2Lntgk;
    private String in2Gssms;
    private String in2Gstgk;
    private String insNoseq;
    private String in2Statf;


    /* BYE 07/10/2014 */
    private String rowID;
    private String jumlah;

    public String getRowID() {
        return rowID;
    }

    public void setRowID(String rowID) {
        this.rowID = rowID;
    }
    
    public String getJumlah() {
        return jumlah;
    }

    public void setJumlah(String jumlah) {
        this.jumlah = jumlah;
    }
    /* BYE 07/10/2014 */
    
    /* BYE 20/11/2014 */
    private int bilangan;
    private String nama;

    public int getBilangan() {
        return bilangan;
    }

    public void setBilangan(int bilangan) {
        this.bilangan = bilangan;
    }    

    public String getNama() {
        return nama;
    }

    public void setNama(String nama) {
        this.nama = nama;
    }    
    
    /* BYE 20/11/2014 */

    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public HLins2 () {

    }

    public HLins2 (String in2AkaunIn) {

          this.in2Akaun = in2AkaunIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public String getIn2Akaun() {
          return this.in2Akaun;
    }
    public void setIn2Akaun(String in2AkaunIn) {
          this.in2Akaun = in2AkaunIn;
    }

    public String getIn2Trikh() {
          return this.in2Trikh;
    }
    public void setIn2Trikh(String in2TrikhIn) {
          this.in2Trikh = in2TrikhIn;
    }

    public String getIn2Ctsms() {
          return this.in2Ctsms;
    }
    public void setIn2Ctsms(String in2CtsmsIn) {
          this.in2Ctsms = in2CtsmsIn;
    }

    public String getIn2Cttgk() {
          return this.in2Cttgk;
    }
    public void setIn2Cttgk(String in2CttgkIn) {
          this.in2Cttgk = in2CttgkIn;
    }

    public String getIn2Dnsms() {
          return this.in2Dnsms;
    }
    public void setIn2Dnsms(String in2DnsmsIn) {
          this.in2Dnsms = in2DnsmsIn;
    }

    public String getIn2Dntgk() {
          return this.in2Dntgk;
    }
    public void setIn2Dntgk(String in2DntgkIn) {
          this.in2Dntgk = in2DntgkIn;
    }

    public String getIn2Ntsms() {
          return this.in2Ntsms;
    }
    public void setIn2Ntsms(String in2NtsmsIn) {
          this.in2Ntsms = in2NtsmsIn;
    }

    public String getIn2Nttgk() {
          return this.in2Nttgk;
    }
    public void setIn2Nttgk(String in2NttgkIn) {
          this.in2Nttgk = in2NttgkIn;
    }

    public String getIn2Wrsms() {
          return this.in2Wrsms;
    }
    public void setIn2Wrsms(String in2WrsmsIn) {
          this.in2Wrsms = in2WrsmsIn;
    }

    public String getIn2Wrtgk() {
          return this.in2Wrtgk;
    }
    public void setIn2Wrtgk(String in2WrtgkIn) {
          this.in2Wrtgk = in2WrtgkIn;
    }

    public String getIn2Lnsms() {
          return this.in2Lnsms;
    }
    public void setIn2Lnsms(String in2LnsmsIn) {
          this.in2Lnsms = in2LnsmsIn;
    }

    public String getIn2Lntgk() {
          return this.in2Lntgk;
    }
    public void setIn2Lntgk(String in2LntgkIn) {
          this.in2Lntgk = in2LntgkIn;
    }

    public String getIn2Gssms() {
          return this.in2Gssms;
    }
    public void setIn2Gssms(String in2GssmsIn) {
          this.in2Gssms = in2GssmsIn;
    }

    public String getIn2Gstgk() {
          return this.in2Gstgk;
    }
    public void setIn2Gstgk(String in2GstgkIn) {
          this.in2Gstgk = in2GstgkIn;
    }

    public String getInsNoseq() {
          return this.insNoseq;
    }
    public void setInsNoseq(String insNoseqIn) {
          this.insNoseq = insNoseqIn;
    }

    public String getIn2Statf() {
          return this.in2Statf;
    }
    public void setIn2Statf(String in2StatfIn) {
          this.in2Statf = in2StatfIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(String in2AkaunIn,
          String in2TrikhIn,
          String in2CtsmsIn,
          String in2CttgkIn,
          String in2DnsmsIn,
          String in2DntgkIn,
          String in2NtsmsIn,
          String in2NttgkIn,
          String in2WrsmsIn,
          String in2WrtgkIn,
          String in2LnsmsIn,
          String in2LntgkIn,
          String in2GssmsIn,
          String in2GstgkIn,
          String insNoseqIn,
          String in2StatfIn) {
          this.in2Akaun = in2AkaunIn;
          this.in2Trikh = in2TrikhIn;
          this.in2Ctsms = in2CtsmsIn;
          this.in2Cttgk = in2CttgkIn;
          this.in2Dnsms = in2DnsmsIn;
          this.in2Dntgk = in2DntgkIn;
          this.in2Ntsms = in2NtsmsIn;
          this.in2Nttgk = in2NttgkIn;
          this.in2Wrsms = in2WrsmsIn;
          this.in2Wrtgk = in2WrtgkIn;
          this.in2Lnsms = in2LnsmsIn;
          this.in2Lntgk = in2LntgkIn;
          this.in2Gssms = in2GssmsIn;
          this.in2Gstgk = in2GstgkIn;
          this.insNoseq = insNoseqIn;
          this.in2Statf = in2StatfIn;
    }


    /** 
     * hasEqualMapping-method will compare two HLins2 instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(HLins2 valueObject) {

          if (this.in2Akaun == null) {
                    if (valueObject.getIn2Akaun() != null)
                           return(false);
          } else if (!this.in2Akaun.equals(valueObject.getIn2Akaun())) {
                    return(false);
          }
          if (this.in2Trikh == null) {
                    if (valueObject.getIn2Trikh() != null)
                           return(false);
          } else if (!this.in2Trikh.equals(valueObject.getIn2Trikh())) {
                    return(false);
          }
          if (this.in2Ctsms == null) {
                    if (valueObject.getIn2Ctsms() != null)
                           return(false);
          } else if (!this.in2Ctsms.equals(valueObject.getIn2Ctsms())) {
                    return(false);
          }
          if (this.in2Cttgk == null) {
                    if (valueObject.getIn2Cttgk() != null)
                           return(false);
          } else if (!this.in2Cttgk.equals(valueObject.getIn2Cttgk())) {
                    return(false);
          }
          if (this.in2Dnsms == null) {
                    if (valueObject.getIn2Dnsms() != null)
                           return(false);
          } else if (!this.in2Dnsms.equals(valueObject.getIn2Dnsms())) {
                    return(false);
          }
          if (this.in2Dntgk == null) {
                    if (valueObject.getIn2Dntgk() != null)
                           return(false);
          } else if (!this.in2Dntgk.equals(valueObject.getIn2Dntgk())) {
                    return(false);
          }
          if (this.in2Ntsms == null) {
                    if (valueObject.getIn2Ntsms() != null)
                           return(false);
          } else if (!this.in2Ntsms.equals(valueObject.getIn2Ntsms())) {
                    return(false);
          }
          if (this.in2Nttgk == null) {
                    if (valueObject.getIn2Nttgk() != null)
                           return(false);
          } else if (!this.in2Nttgk.equals(valueObject.getIn2Nttgk())) {
                    return(false);
          }
          if (this.in2Wrsms == null) {
                    if (valueObject.getIn2Wrsms() != null)
                           return(false);
          } else if (!this.in2Wrsms.equals(valueObject.getIn2Wrsms())) {
                    return(false);
          }
          if (this.in2Wrtgk == null) {
                    if (valueObject.getIn2Wrtgk() != null)
                           return(false);
          } else if (!this.in2Wrtgk.equals(valueObject.getIn2Wrtgk())) {
                    return(false);
          }
          if (this.in2Lnsms == null) {
                    if (valueObject.getIn2Lnsms() != null)
                           return(false);
          } else if (!this.in2Lnsms.equals(valueObject.getIn2Lnsms())) {
                    return(false);
          }
          if (this.in2Lntgk == null) {
                    if (valueObject.getIn2Lntgk() != null)
                           return(false);
          } else if (!this.in2Lntgk.equals(valueObject.getIn2Lntgk())) {
                    return(false);
          }
          if (this.in2Gssms == null) {
                    if (valueObject.getIn2Gssms() != null)
                           return(false);
          } else if (!this.in2Gssms.equals(valueObject.getIn2Gssms())) {
                    return(false);
          }
          if (this.in2Gstgk == null) {
                    if (valueObject.getIn2Gstgk() != null)
                           return(false);
          } else if (!this.in2Gstgk.equals(valueObject.getIn2Gstgk())) {
                    return(false);
          }
          if (this.insNoseq == null) {
                    if (valueObject.getInsNoseq() != null)
                           return(false);
          } else if (!this.insNoseq.equals(valueObject.getInsNoseq())) {
                    return(false);
          }
          if (this.in2Statf == null) {
                    if (valueObject.getIn2Statf() != null)
                           return(false);
          } else if (!this.in2Statf.equals(valueObject.getIn2Statf())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass HLins2, mapping to table hlins2\n");
        out.append("Persistent attributes: \n"); 
        out.append("in2Akaun = " + this.in2Akaun + "\n"); 
        out.append("in2Trikh = " + this.in2Trikh + "\n"); 
        out.append("in2Ctsms = " + this.in2Ctsms + "\n"); 
        out.append("in2Cttgk = " + this.in2Cttgk + "\n"); 
        out.append("in2Dnsms = " + this.in2Dnsms + "\n"); 
        out.append("in2Dntgk = " + this.in2Dntgk + "\n"); 
        out.append("in2Ntsms = " + this.in2Ntsms + "\n"); 
        out.append("in2Nttgk = " + this.in2Nttgk + "\n"); 
        out.append("in2Wrsms = " + this.in2Wrsms + "\n"); 
        out.append("in2Wrtgk = " + this.in2Wrtgk + "\n"); 
        out.append("in2Lnsms = " + this.in2Lnsms + "\n"); 
        out.append("in2Lntgk = " + this.in2Lntgk + "\n"); 
        out.append("in2Gssms = " + this.in2Gssms + "\n"); 
        out.append("in2Gstgk = " + this.in2Gstgk + "\n"); 
        out.append("insNoseq = " + this.insNoseq + "\n"); 
        out.append("in2Statf = " + this.in2Statf + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        HLins2 cloned = new HLins2();

        if (this.in2Akaun != null)
             cloned.setIn2Akaun(new String(this.in2Akaun)); 
        if (this.in2Trikh != null)
             cloned.setIn2Trikh(new String(this.in2Trikh)); 
        if (this.in2Ctsms != null)
             cloned.setIn2Ctsms(new String(this.in2Ctsms)); 
        if (this.in2Cttgk != null)
             cloned.setIn2Cttgk(new String(this.in2Cttgk)); 
        if (this.in2Dnsms != null)
             cloned.setIn2Dnsms(new String(this.in2Dnsms)); 
        if (this.in2Dntgk != null)
             cloned.setIn2Dntgk(new String(this.in2Dntgk)); 
        if (this.in2Ntsms != null)
             cloned.setIn2Ntsms(new String(this.in2Ntsms)); 
        if (this.in2Nttgk != null)
             cloned.setIn2Nttgk(new String(this.in2Nttgk)); 
        if (this.in2Wrsms != null)
             cloned.setIn2Wrsms(new String(this.in2Wrsms)); 
        if (this.in2Wrtgk != null)
             cloned.setIn2Wrtgk(new String(this.in2Wrtgk)); 
        if (this.in2Lnsms != null)
             cloned.setIn2Lnsms(new String(this.in2Lnsms)); 
        if (this.in2Lntgk != null)
             cloned.setIn2Lntgk(new String(this.in2Lntgk)); 
        if (this.in2Gssms != null)
             cloned.setIn2Gssms(new String(this.in2Gssms)); 
        if (this.in2Gstgk != null)
             cloned.setIn2Gstgk(new String(this.in2Gstgk)); 
        if (this.insNoseq != null)
             cloned.setInsNoseq(new String(this.insNoseq)); 
        if (this.in2Statf != null)
             cloned.setIn2Statf(new String(this.in2Statf)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}