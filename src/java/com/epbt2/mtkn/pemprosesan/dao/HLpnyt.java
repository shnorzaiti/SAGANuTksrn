package com.epbt2.mtkn.pemprosesan.dao;


import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * HLpnyt Value Object.
  * This class is value object representing database table HLpnyt
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class HLpnyt implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private String PYtakaun;
    private String PYtkdrjk;
    private String PYtnobil;
    private String PYtkhbl;
    private String PYtamaun;
    private String PYtstatf;
    private String PYtnkump;
    private String PYtssiri;
    private String PYtnsiri;
    
    private String penggal;

    public String getPenggal() {
        return penggal;
    }

    public void setPenggal(String penggal) {
        this.penggal = penggal;
    }
    
    
    
    /* BYE 05/08/2014 */
    private float amtgk;
    private float amsms;
    private float tngak;
    private float smasa;

    public float getAmtgk() {
        return amtgk;
    }

    public void setAmtgk(float amtgk) {
        this.amtgk = amtgk;
    }

    public float getAmsms() {
        return amsms;
    }

    public void setAmsms(float amsms) {
        this.amsms = amsms;
    }
    

    public float getTngak() {
        return tngak;
    }

    public void setTngak(float tngak) {
        this.tngak = tngak;
    }

    public float getSmasa() {
        return smasa;
    }

    public void setSmasa(float smasa) {
        this.smasa = smasa;
    }
    /* BYE 05/08/2014 */


    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public HLpnyt () {

    }

    public HLpnyt (String PYtakaunIn) {

          this.PYtakaun = PYtakaunIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public String getPYtakaun() {
          return this.PYtakaun;
    }
    public void setPYtakaun(String PYtakaunIn) {
          this.PYtakaun = PYtakaunIn;
    }

    public String getPYtkdrjk() {
          return this.PYtkdrjk;
    }
    public void setPYtkdrjk(String PYtkdrjkIn) {
          this.PYtkdrjk = PYtkdrjkIn;
    }

    public String getPYtnobil() {
          return this.PYtnobil;
    }
    public void setPYtnobil(String PYtnobilIn) {
          this.PYtnobil = PYtnobilIn;
    }

    public String getPYtkhbl() {
          return this.PYtkhbl;
    }
    public void setPYtkhbl(String PYtkhblIn) {
          this.PYtkhbl = PYtkhblIn;
    }

    public String getPYtamaun() {
          return this.PYtamaun;
    }
    public void setPYtamaun(String PYtamaunIn) {
          this.PYtamaun = PYtamaunIn;
    }

    public String getPYtstatf() {
          return this.PYtstatf;
    }
    public void setPYtstatf(String PYtstatfIn) {
          this.PYtstatf = PYtstatfIn;
    }

    public String getPYtnkump() {
          return this.PYtnkump;
    }
    public void setPYtnkump(String PYtnkumpIn) {
          this.PYtnkump = PYtnkumpIn;
    }

    public String getPYtssiri() {
          return this.PYtssiri;
    }
    public void setPYtssiri(String PYtssiriIn) {
          this.PYtssiri = PYtssiriIn;
    }

    public String getPYtnsiri() {
          return this.PYtnsiri;
    }
    public void setPYtnsiri(String PYtnsiriIn) {
          this.PYtnsiri = PYtnsiriIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(String PYtakaunIn,
          String PYtkdrjkIn,
          String PYtnobilIn,
          String PYtkhblIn,
          String PYtamaunIn,
          String PYtstatfIn,
          String PYtnkumpIn,
          String PYtssiriIn,
          String PYtnsiriIn) {
          this.PYtakaun = PYtakaunIn;
          this.PYtkdrjk = PYtkdrjkIn;
          this.PYtnobil = PYtnobilIn;
          this.PYtkhbl = PYtkhblIn;
          this.PYtamaun = PYtamaunIn;
          this.PYtstatf = PYtstatfIn;
          this.PYtnkump = PYtnkumpIn;
          this.PYtssiri = PYtssiriIn;
          this.PYtnsiri = PYtnsiriIn;
    }


    /** 
     * hasEqualMapping-method will compare two HLpnyt instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(HLpnyt valueObject) {

          if (this.PYtakaun == null) {
                    if (valueObject.getPYtakaun() != null)
                           return(false);
          } else if (!this.PYtakaun.equals(valueObject.getPYtakaun())) {
                    return(false);
          }
          if (this.PYtkdrjk == null) {
                    if (valueObject.getPYtkdrjk() != null)
                           return(false);
          } else if (!this.PYtkdrjk.equals(valueObject.getPYtkdrjk())) {
                    return(false);
          }
          if (this.PYtnobil == null) {
                    if (valueObject.getPYtnobil() != null)
                           return(false);
          } else if (!this.PYtnobil.equals(valueObject.getPYtnobil())) {
                    return(false);
          }
          if (this.PYtkhbl == null) {
                    if (valueObject.getPYtkhbl() != null)
                           return(false);
          } else if (!this.PYtkhbl.equals(valueObject.getPYtkhbl())) {
                    return(false);
          }
          if (this.PYtamaun == null) {
                    if (valueObject.getPYtamaun() != null)
                           return(false);
          } else if (!this.PYtamaun.equals(valueObject.getPYtamaun())) {
                    return(false);
          }
          if (this.PYtstatf == null) {
                    if (valueObject.getPYtstatf() != null)
                           return(false);
          } else if (!this.PYtstatf.equals(valueObject.getPYtstatf())) {
                    return(false);
          }
          if (this.PYtnkump == null) {
                    if (valueObject.getPYtnkump() != null)
                           return(false);
          } else if (!this.PYtnkump.equals(valueObject.getPYtnkump())) {
                    return(false);
          }
          if (this.PYtssiri == null) {
                    if (valueObject.getPYtssiri() != null)
                           return(false);
          } else if (!this.PYtssiri.equals(valueObject.getPYtssiri())) {
                    return(false);
          }
          if (this.PYtnsiri == null) {
                    if (valueObject.getPYtnsiri() != null)
                           return(false);
          } else if (!this.PYtnsiri.equals(valueObject.getPYtnsiri())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass HLpnyt, mapping to table HLpnyt\n");
        out.append("Persistent attributes: \n"); 
        out.append("PYtakaun = " + this.PYtakaun + "\n"); 
        out.append("PYtkdrjk = " + this.PYtkdrjk + "\n"); 
        out.append("PYtnobil = " + this.PYtnobil + "\n"); 
        out.append("PYtkhbl = " + this.PYtkhbl + "\n"); 
        out.append("PYtamaun = " + this.PYtamaun + "\n"); 
        out.append("PYtstatf = " + this.PYtstatf + "\n"); 
        out.append("PYtnkump = " + this.PYtnkump + "\n"); 
        out.append("PYtssiri = " + this.PYtssiri + "\n"); 
        out.append("PYtnsiri = " + this.PYtnsiri + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        HLpnyt cloned = new HLpnyt();

        if (this.PYtakaun != null)
             cloned.setPYtakaun(new String(this.PYtakaun)); 
        if (this.PYtkdrjk != null)
             cloned.setPYtkdrjk(new String(this.PYtkdrjk)); 
        if (this.PYtnobil != null)
             cloned.setPYtnobil(new String(this.PYtnobil)); 
        if (this.PYtkhbl != null)
             cloned.setPYtkhbl(new String(this.PYtkhbl)); 
        if (this.PYtamaun != null)
             cloned.setPYtamaun(new String(this.PYtamaun)); 
        if (this.PYtstatf != null)
             cloned.setPYtstatf(new String(this.PYtstatf)); 
        if (this.PYtnkump != null)
             cloned.setPYtnkump(new String(this.PYtnkump)); 
        if (this.PYtssiri != null)
             cloned.setPYtssiri(new String(this.PYtssiri)); 
        if (this.PYtnsiri != null)
             cloned.setPYtnsiri(new String(this.PYtnsiri)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}