package com.epbt2.mtkn.pemprosesan.dao;

import java.io.Serializable;




 /**
  * HJenpk Value Object.
  * This class is value object representing database table HJENPK
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class HJenpk implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private String JPkjpkod;
    private String JPkitkod;
    private String JPkjnama;
    private String JPkstcbk;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public HJenpk () {

    }

    public HJenpk (String JPkjpkodIn) {

          this.JPkjpkod = JPkjpkodIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public String getJPkjpkod() {
          return this.JPkjpkod;
    }
    public void setJPkjpkod(String JPkjpkodIn) {
          this.JPkjpkod = JPkjpkodIn;
    }

    public String getJPkitkod() {
          return this.JPkitkod;
    }
    public void setJPkitkod(String JPkitkodIn) {
          this.JPkitkod = JPkitkodIn;
    }

    public String getJPkjnama() {
          return this.JPkjnama;
    }
    public void setJPkjnama(String JPkjnamaIn) {
          this.JPkjnama = JPkjnamaIn;
    }

    public String getJPkstcbk() {
          return this.JPkstcbk;
    }
    public void setJPkstcbk(String JPkstcbkIn) {
          this.JPkstcbk = JPkstcbkIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(String JPkjpkodIn,
          String JPkitkodIn,
          String JPkjnamaIn,
          String JPkstcbkIn) {
          this.JPkjpkod = JPkjpkodIn;
          this.JPkitkod = JPkitkodIn;
          this.JPkjnama = JPkjnamaIn;
          this.JPkstcbk = JPkstcbkIn;
    }


    /** 
     * hasEqualMapping-method will compare two HJenpk instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(HJenpk valueObject) {

          if (this.JPkjpkod == null) {
                    if (valueObject.getJPkjpkod() != null)
                           return(false);
          } else if (!this.JPkjpkod.equals(valueObject.getJPkjpkod())) {
                    return(false);
          }
          if (this.JPkitkod == null) {
                    if (valueObject.getJPkitkod() != null)
                           return(false);
          } else if (!this.JPkitkod.equals(valueObject.getJPkitkod())) {
                    return(false);
          }
          if (this.JPkjnama == null) {
                    if (valueObject.getJPkjnama() != null)
                           return(false);
          } else if (!this.JPkjnama.equals(valueObject.getJPkjnama())) {
                    return(false);
          }
          if (this.JPkstcbk == null) {
                    if (valueObject.getJPkstcbk() != null)
                           return(false);
          } else if (!this.JPkstcbk.equals(valueObject.getJPkstcbk())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass HJenpk, mapping to table HJENPK\n");
        out.append("Persistent attributes: \n"); 
        out.append("JPkjpkod = " + this.JPkjpkod + "\n"); 
        out.append("JPkitkod = " + this.JPkitkod + "\n"); 
        out.append("JPkjnama = " + this.JPkjnama + "\n"); 
        out.append("JPkstcbk = " + this.JPkstcbk + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        HJenpk cloned = new HJenpk();

        if (this.JPkjpkod != null)
             cloned.setJPkjpkod(new String(this.JPkjpkod)); 
        if (this.JPkitkod != null)
             cloned.setJPkitkod(new String(this.JPkitkod)); 
        if (this.JPkjnama != null)
             cloned.setJPkjnama(new String(this.JPkjnama)); 
        if (this.JPkstcbk != null)
             cloned.setJPkstcbk(new String(this.JPkstcbk)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
