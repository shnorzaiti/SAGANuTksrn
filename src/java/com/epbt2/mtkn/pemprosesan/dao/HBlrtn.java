package com.epbt2.mtkn.pemprosesan.dao;

import java.io.Serializable;




 /**
  * HBlrtn Value Object.
  * This class is value object representing database table hblrtn
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class HBlrtn implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private String bilAkaun;
    private String bilAmtid;
    private String bilPngal;
    private String bilTrikh;
    private String bilCatat;
    private String bilStatb;
    private String bilOnama;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public HBlrtn () {

    }

    public HBlrtn (String bilAkaunIn) {

          this.bilAkaun = bilAkaunIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public String getBilAkaun() {
          return this.bilAkaun;
    }
    public void setBilAkaun(String bilAkaunIn) {
          this.bilAkaun = bilAkaunIn;
    }

    public String getBilAmtid() {
          return this.bilAmtid;
    }
    public void setBilAmtid(String bilAmtidIn) {
          this.bilAmtid = bilAmtidIn;
    }

    public String getBilPngal() {
          return this.bilPngal;
    }
    public void setBilPngal(String bilPngalIn) {
          this.bilPngal = bilPngalIn;
    }

    public String getBilTrikh() {
          return this.bilTrikh;
    }
    public void setBilTrikh(String bilTrikhIn) {
          this.bilTrikh = bilTrikhIn;
    }

    public String getBilCatat() {
          return this.bilCatat;
    }
    public void setBilCatat(String bilCatatIn) {
          this.bilCatat = bilCatatIn;
    }

    public String getBilStatb() {
          return this.bilStatb;
    }
    public void setBilStatb(String bilStatbIn) {
          this.bilStatb = bilStatbIn;
    }

    public String getBilOnama() {
          return this.bilOnama;
    }
    public void setBilOnama(String bilOnamaIn) {
          this.bilOnama = bilOnamaIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(String bilAkaunIn,
          String bilAmtidIn,
          String bilPngalIn,
          String bilTrikhIn,
          String bilCatatIn,
          String bilStatbIn,
          String bilOnamaIn) {
          this.bilAkaun = bilAkaunIn;
          this.bilAmtid = bilAmtidIn;
          this.bilPngal = bilPngalIn;
          this.bilTrikh = bilTrikhIn;
          this.bilCatat = bilCatatIn;
          this.bilStatb = bilStatbIn;
          this.bilOnama = bilOnamaIn;
    }


    /** 
     * hasEqualMapping-method will compare two HBlrtn instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(HBlrtn valueObject) {

          if (this.bilAkaun == null) {
                    if (valueObject.getBilAkaun() != null)
                           return(false);
          } else if (!this.bilAkaun.equals(valueObject.getBilAkaun())) {
                    return(false);
          }
          if (this.bilAmtid == null) {
                    if (valueObject.getBilAmtid() != null)
                           return(false);
          } else if (!this.bilAmtid.equals(valueObject.getBilAmtid())) {
                    return(false);
          }
          if (this.bilPngal == null) {
                    if (valueObject.getBilPngal() != null)
                           return(false);
          } else if (!this.bilPngal.equals(valueObject.getBilPngal())) {
                    return(false);
          }
          if (this.bilTrikh == null) {
                    if (valueObject.getBilTrikh() != null)
                           return(false);
          } else if (!this.bilTrikh.equals(valueObject.getBilTrikh())) {
                    return(false);
          }
          if (this.bilCatat == null) {
                    if (valueObject.getBilCatat() != null)
                           return(false);
          } else if (!this.bilCatat.equals(valueObject.getBilCatat())) {
                    return(false);
          }
          if (this.bilStatb == null) {
                    if (valueObject.getBilStatb() != null)
                           return(false);
          } else if (!this.bilStatb.equals(valueObject.getBilStatb())) {
                    return(false);
          }
          if (this.bilOnama == null) {
                    if (valueObject.getBilOnama() != null)
                           return(false);
          } else if (!this.bilOnama.equals(valueObject.getBilOnama())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass HBlrtn, mapping to table hblrtn\n");
        out.append("Persistent attributes: \n"); 
        out.append("bilAkaun = " + this.bilAkaun + "\n"); 
        out.append("bilAmtid = " + this.bilAmtid + "\n"); 
        out.append("bilPngal = " + this.bilPngal + "\n"); 
        out.append("bilTrikh = " + this.bilTrikh + "\n"); 
        out.append("bilCatat = " + this.bilCatat + "\n"); 
        out.append("bilStatb = " + this.bilStatb + "\n"); 
        out.append("bilOnama = " + this.bilOnama + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        HBlrtn cloned = new HBlrtn();

        if (this.bilAkaun != null)
             cloned.setBilAkaun(new String(this.bilAkaun)); 
        if (this.bilAmtid != null)
             cloned.setBilAmtid(new String(this.bilAmtid)); 
        if (this.bilPngal != null)
             cloned.setBilPngal(new String(this.bilPngal)); 
        if (this.bilTrikh != null)
             cloned.setBilTrikh(new String(this.bilTrikh)); 
        if (this.bilCatat != null)
             cloned.setBilCatat(new String(this.bilCatat)); 
        if (this.bilStatb != null)
             cloned.setBilStatb(new String(this.bilStatb)); 
        if (this.bilOnama != null)
             cloned.setBilOnama(new String(this.bilOnama)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}