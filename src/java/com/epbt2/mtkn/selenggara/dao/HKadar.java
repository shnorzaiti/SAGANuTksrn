/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.epbt2.mtkn.selenggara.dao;

/**
 *
 * @author NurMuhammadAfzal
 */

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * HKadar Value Object.
  * This class is value object representing database table MTKN.HKADAR
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class HKadar implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private String KDrstatf;
    private String KDrlower;
    private String KDrupper;
    private String KDramaun;
    private String KDraminc;
    private String KDrincre;
    private String KDrpcent;
    
    /*
    Mohammad Hafiz July 23, 2014
    */
    
    private String KDrlowerAsal;
    private String KDrupperAsal;
    private String KDrdesc;
    
    /*
    Mohammad Hafiz July 23, 2014
    */
    public String getKDrlowerAsal() {
        return KDrlowerAsal;
    }

    public void setKDrlowerAsal(String KDrlowerAsal) {
        this.KDrlowerAsal = KDrlowerAsal;
    }

    public String getKDrupperAsal() {
        return KDrupperAsal;
    }

    public void setKDrupperAsal(String KDrupperAsal) {
        this.KDrupperAsal = KDrupperAsal;
    }

    private String rowID;

    public String getRowID() {
        return rowID;
    }

    public void setRowID(String rowID) {
        this.rowID = rowID;
    }

    public String getKDrdesc() {
        return KDrdesc;
    }

    public void setKDrdesc(String KDrdesc) {
        this.KDrdesc = KDrdesc;
    }
    
    private String rowNum;

    public String getRowNum() {
        return rowNum;
    }

    public void setRowNum(String rowNum) {
        this.rowNum = rowNum;
    }
    
    /* BYE 21/07/2016 */
    private String stsBuang;

    public String getStsBuang() {
        return stsBuang;
    }

    public void setStsBuang(String stsBuang) {
        this.stsBuang = stsBuang;
    }
    /* BYE 21/07/2016 */


    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public HKadar () {

    }

    public HKadar (String KDrstatfIn) {

          this.KDrstatf = KDrstatfIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public String getKDrstatf() {
          return this.KDrstatf;
    }
    public void setKDrstatf(String KDrstatfIn) {
          this.KDrstatf = KDrstatfIn;
    }

    public String getKDrlower() {
          return this.KDrlower;
    }
    public void setKDrlower(String KDrlowerIn) {
          this.KDrlower = KDrlowerIn;
    }

    public String getKDrupper() {
          return this.KDrupper;
    }
    public void setKDrupper(String KDrupperIn) {
          this.KDrupper = KDrupperIn;
    }

    public String getKDramaun() {
          return this.KDramaun;
    }
    public void setKDramaun(String KDramaunIn) {
          this.KDramaun = KDramaunIn;
    }

    public String getKDraminc() {
          return this.KDraminc;
    }
    public void setKDraminc(String KDramincIn) {
          this.KDraminc = KDramincIn;
    }

    public String getKDrincre() {
          return this.KDrincre;
    }
    public void setKDrincre(String KDrincreIn) {
          this.KDrincre = KDrincreIn;
    }

    public String getKDrpcent() {
          return this.KDrpcent;
    }
    public void setKDrpcent(String KDrpcentIn) {
          this.KDrpcent = KDrpcentIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(String KDrstatfIn,
          String rowIDIn,
          String KDrlowerIn,
          String KDrupperIn,
          String KDramaunIn,
          String KDramincIn,
          String KDrincreIn,
          String KDrpcentIn) {
          this.KDrstatf = KDrstatfIn;
          this.rowID = rowIDIn;
          this.KDrlower = KDrlowerIn;
          this.KDrupper = KDrupperIn;
          this.KDramaun = KDramaunIn;
          this.KDraminc = KDramincIn;
          this.KDrincre = KDrincreIn;
          this.KDrpcent = KDrpcentIn;
    }


    /** 
     * hasEqualMapping-method will compare two HKadar instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(HKadar valueObject) {

          if (this.rowID == null) {
                    if (valueObject.getRowID()!= null)
                           return(false);
          } else if (!this.rowID.equals(valueObject.getRowID())) {
                    return(false);
          }
          if (this.KDrstatf == null) {
                    if (valueObject.getKDrstatf() != null)
                           return(false);
          } else if (!this.KDrstatf.equals(valueObject.getKDrstatf())) {
                    return(false);
          }
          if (this.KDrlower == null) {
                    if (valueObject.getKDrlower() != null)
                           return(false);
          } else if (!this.KDrlower.equals(valueObject.getKDrlower())) {
                    return(false);
          }
          if (this.KDrupper == null) {
                    if (valueObject.getKDrupper() != null)
                           return(false);
          } else if (!this.KDrupper.equals(valueObject.getKDrupper())) {
                    return(false);
          }
          if (this.KDramaun == null) {
                    if (valueObject.getKDramaun() != null)
                           return(false);
          } else if (!this.KDramaun.equals(valueObject.getKDramaun())) {
                    return(false);
          }
          if (this.KDraminc == null) {
                    if (valueObject.getKDraminc() != null)
                           return(false);
          } else if (!this.KDraminc.equals(valueObject.getKDraminc())) {
                    return(false);
          }
          if (this.KDrincre == null) {
                    if (valueObject.getKDrincre() != null)
                           return(false);
          } else if (!this.KDrincre.equals(valueObject.getKDrincre())) {
                    return(false);
          }
          if (this.KDrpcent == null) {
                    if (valueObject.getKDrpcent() != null)
                           return(false);
          } else if (!this.KDrpcent.equals(valueObject.getKDrpcent())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass HKadar, mapping to table MTKN.HKADAR\n");
        out.append("Persistent attributes: \n"); 
        out.append("rowID = " + this.rowID + "\n"); 
        out.append("KDrstatf = " + this.KDrstatf + "\n"); 
        out.append("KDrlower = " + this.KDrlower + "\n"); 
        out.append("KDrupper = " + this.KDrupper + "\n"); 
        out.append("KDramaun = " + this.KDramaun + "\n"); 
        out.append("KDraminc = " + this.KDraminc + "\n"); 
        out.append("KDrincre = " + this.KDrincre + "\n"); 
        out.append("KDrpcent = " + this.KDrpcent + "\n");  
        out.append("KDrdesc = " + this.KDrdesc + "\n");
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        HKadar cloned = new HKadar();

        if (this.rowID != null)
             cloned.setKDrstatf(new String(this.rowID)); 
        if (this.KDrstatf != null)
             cloned.setKDrstatf(new String(this.KDrstatf)); 
        if (this.KDrlower != null)
             cloned.setKDrlower(new String(this.KDrlower)); 
        if (this.KDrupper != null)
             cloned.setKDrupper(new String(this.KDrupper)); 
        if (this.KDramaun != null)
             cloned.setKDramaun(new String(this.KDramaun)); 
        if (this.KDraminc != null)
             cloned.setKDraminc(new String(this.KDraminc)); 
        if (this.KDrincre != null)
             cloned.setKDrincre(new String(this.KDrincre)); 
        if (this.KDrpcent != null)
             cloned.setKDrpcent(new String(this.KDrpcent)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
