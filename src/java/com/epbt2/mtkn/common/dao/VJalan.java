package com.epbt2.mtkn.common.dao;


import java.io.*;

 /**
  * VJalan Value Object.
  * This class is value object representing database table SPBT.VJALAN
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class VJalan implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private String jlnKwkod;
    private String jlnKnama;
    private String jlnJlkod;
    private String jlnJnama;
    private String jlnPoskd;
    private String jlnNegri;
    private String jlnPskod;
    
    private String keter;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public VJalan () {

    }

    public VJalan (String jlnKwkodIn) {

          this.jlnKwkod = jlnKwkodIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public String getJlnKwkod() {
          return this.jlnKwkod;
    }
    public void setJlnKwkod(String jlnKwkodIn) {
          this.jlnKwkod = jlnKwkodIn;
    }

    public String getJlnKnama() {
          return this.jlnKnama;
    }
    public void setJlnKnama(String jlnKnamaIn) {
          this.jlnKnama = jlnKnamaIn;
    }

    public String getJlnJlkod() {
          return this.jlnJlkod;
    }
    public void setJlnJlkod(String jlnJlkodIn) {
          this.jlnJlkod = jlnJlkodIn;
    }

    public String getJlnJnama() {
          return this.jlnJnama;
    }
    public void setJlnJnama(String jlnJnamaIn) {
          this.jlnJnama = jlnJnamaIn;
    }

    public String getJlnPoskd() {
          return this.jlnPoskd;
    }
    public void setJlnPoskd(String jlnPoskdIn) {
          this.jlnPoskd = jlnPoskdIn;
    }

    public String getJlnNegri() {
          return this.jlnNegri;
    }
    public void setJlnNegri(String jlnNegriIn) {
          this.jlnNegri = jlnNegriIn;
    }

    public String getJlnPskod() {
          return this.jlnPskod;
    }
    public void setJlnPskod(String jlnPskodIn) {
          this.jlnPskod = jlnPskodIn;
    }

    public String getKeter() {
        return keter;
    }

    public void setKeter(String keter) {
        this.keter = keter;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(String jlnKwkodIn,
          String jlnKnamaIn,
          String jlnJlkodIn,
          String jlnJnamaIn,
          String jlnPoskdIn,
          String jlnNegriIn,
          String jlnPskodIn) {
          this.jlnKwkod = jlnKwkodIn;
          this.jlnKnama = jlnKnamaIn;
          this.jlnJlkod = jlnJlkodIn;
          this.jlnJnama = jlnJnamaIn;
          this.jlnPoskd = jlnPoskdIn;
          this.jlnNegri = jlnNegriIn;
          this.jlnPskod = jlnPskodIn;
    }


    /** 
     * hasEqualMapping-method will compare two VJalan instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(VJalan valueObject) {

          if (this.jlnKwkod == null) {
                    if (valueObject.getJlnKwkod() != null)
                           return(false);
          } else if (!this.jlnKwkod.equals(valueObject.getJlnKwkod())) {
                    return(false);
          }
          if (this.jlnKnama == null) {
                    if (valueObject.getJlnKnama() != null)
                           return(false);
          } else if (!this.jlnKnama.equals(valueObject.getJlnKnama())) {
                    return(false);
          }
          if (this.jlnJlkod == null) {
                    if (valueObject.getJlnJlkod() != null)
                           return(false);
          } else if (!this.jlnJlkod.equals(valueObject.getJlnJlkod())) {
                    return(false);
          }
          if (this.jlnJnama == null) {
                    if (valueObject.getJlnJnama() != null)
                           return(false);
          } else if (!this.jlnJnama.equals(valueObject.getJlnJnama())) {
                    return(false);
          }
          if (this.jlnPoskd == null) {
                    if (valueObject.getJlnPoskd() != null)
                           return(false);
          } else if (!this.jlnPoskd.equals(valueObject.getJlnPoskd())) {
                    return(false);
          }
          if (this.jlnNegri == null) {
                    if (valueObject.getJlnNegri() != null)
                           return(false);
          } else if (!this.jlnNegri.equals(valueObject.getJlnNegri())) {
                    return(false);
          }
          if (this.jlnPskod == null) {
                    if (valueObject.getJlnPskod() != null)
                           return(false);
          } else if (!this.jlnPskod.equals(valueObject.getJlnPskod())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass VJalan, mapping to table SPBT.VJALAN\n");
        out.append("Persistent attributes: \n"); 
        out.append("jlnKwkod = " + this.jlnKwkod + "\n"); 
        out.append("jlnKnama = " + this.jlnKnama + "\n"); 
        out.append("jlnJlkod = " + this.jlnJlkod + "\n"); 
        out.append("jlnJnama = " + this.jlnJnama + "\n"); 
        out.append("jlnPoskd = " + this.jlnPoskd + "\n"); 
        out.append("jlnNegri = " + this.jlnNegri + "\n"); 
        out.append("jlnPskod = " + this.jlnPskod + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        VJalan cloned = new VJalan();

        if (this.jlnKwkod != null)
             cloned.setJlnKwkod(new String(this.jlnKwkod)); 
        if (this.jlnKnama != null)
             cloned.setJlnKnama(new String(this.jlnKnama)); 
        if (this.jlnJlkod != null)
             cloned.setJlnJlkod(new String(this.jlnJlkod)); 
        if (this.jlnJnama != null)
             cloned.setJlnJnama(new String(this.jlnJnama)); 
        if (this.jlnPoskd != null)
             cloned.setJlnPoskd(new String(this.jlnPoskd)); 
        if (this.jlnNegri != null)
             cloned.setJlnNegri(new String(this.jlnNegri)); 
        if (this.jlnPskod != null)
             cloned.setJlnPskod(new String(this.jlnPskod)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
