package com.epbt2.ssla.ref.dao;

import com.epbt2.util.NotFoundException;
import java.sql.*;
import java.util.*;

/**
 * Aftran Data Access Object (DAO). This class contains all database handling
 * that is needed to permanently store and retrieve Aftran object instances.
 */
/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/ It has been
 * programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed under
 * the terms of GNU GPL license. The full text for license is available in GNU
 * project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is 5 USD or
 * 5 Eur for each database table, you are generating code for. (That includes
 * unlimited amount of iterations with all supported languages for each database
 * table you are paying for.) Send mail to "Tuomo.Lukka@iki.fi" for more
 * information. Thank you!
 */
public class AftranDao {

    /**
     * createValueObject-method. This method is used when the Dao class needs to
     * create new value object instance. The reason why this method exists is
     * that sometimes the programmer may want to extend also the valueObject and
     * then this method can be overrided to return extended valueObject. NOTE:
     * If you extend the valueObject class, make sure to override the clone()
     * method in it!
     */
    public Aftran createValueObject() {
        return new Aftran();
    }

    /**
     * getObject-method. This will create and load valueObject contents from
     * database using given Primary-Key as identifier. This method is just a
     * convenience method for the real load-method which accepts the valueObject
     * as a parameter. Returned valueObject will be created using the
     * createValueObject() method.
     */
    public Aftran getObject(Connection conn, String aftTahun) throws NotFoundException, SQLException {

        Aftran valueObject = createValueObject();
        valueObject.setAftTahun(aftTahun);
        load(conn, valueObject);
        return valueObject;
    }

    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that
     * valueObject instance is created and only primary-key should be specified.
     * Then call this method to complete other persistent information. This
     * method will overwrite all other fields except primary-key and possible
     * runtime variables. If load can not find matching row, NotFoundException
     * will be thrown.
     *
     * @param conn This method requires working database connection.
     * @param valueObject This parameter contains the class instance to be
     * loaded. Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn, Aftran valueObject) throws NotFoundException, SQLException {

        if (valueObject.getAftTahun() == null) {
            //System.out.println("Can not select without Primary-Key!");
            throw new NotFoundException("Can not select without Primary-Key!");
        }

        String sql = "SELECT * FROM SSLA.AFTRAN WHERE (AFT_TAHUN = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, valueObject.getAftTahun());

            singleQuery(conn, stmt, valueObject);

        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    /**
     * LoadAll-method. This will read all contents from database table and build
     * a List containing valueObjects. Please note, that this method will
     * consume huge amounts of resources if table has lot's of rows. This should
     * only be used when target tables have only small amounts of data.
     *
     * @param conn This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException {

        String sql = "SELECT * FROM SSLA.AFTRAN ORDER BY AFT_TAHUN ASC ";
        List searchResults = listQuery(conn, conn.prepareStatement(sql));

        return searchResults;
    }

    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic
     * surrogate-keys the primary-key must be specified. After INSERT command
     * this method will read the generated primary-key back to valueObject if
     * automatic surrogate-keys were used.
     *
     * @param conn This method requires working database connection.
     * @param valueObject This parameter contains the class instance to be
     * created. If automatic surrogate-keys are not used the Primary-key field
     * must be set for this to work properly.
     */
    public synchronized void create(Connection conn, Aftran valueObject, String kodTrx) throws SQLException {

        String sql = "";
        PreparedStatement stmt = null;
        ResultSet result = null;

        try {
            sql = "INSERT INTO SSLA.AFTRAN ( AFT_TAHUN, AFT_BULAN, AFT_NEGRI, "
                    + "AFT_MAJCW, AFT_PTJPK, AFT_BIAPG, "
                    + "AFT_PJKAK, AFT_OBJEK, AFT_STKOD, "
                    + "AFT_AMAUN, AFT_SDRCR, AFT_SSIRI, "
                    + "AFT_NSIRI, AFT_TKHTX, AFT_MODIN, "
                    + "AFT_ONAMA, AFT_STATF, AFT_KWKOD, "
                    + "AFT_TARKH, AFT_KDGRP) VALUES ("
                    //+ "TO_CHAR(SYSDATE,'YYYY'), TO_CHAR(SYSDATE,'MM'), SUBSTR('"+kodTrx+"',01,2) "
                    + "TO_CHAR(TO_DATE(?,'DD/MM/YYYY'),'YYYY'), TO_CHAR(TO_DATE(?,'DD/MM/YYYY'),'MM'), SUBSTR('"+kodTrx+"',01,2) "
                    + ", SUBSTR('"+kodTrx+"',03,4), SUBSTR('"+kodTrx+"',07,4), SUBSTR('"+kodTrx+"',11,2) "
                    + ", SUBSTR('"+kodTrx+"',13,6), SUBSTR('"+kodTrx+"',19,6), ? "
                    + ", ?, ?, ? "
                    //+ ", ?, TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD'), ? "
                    + ", ?, TO_DATE(?,'DD/MM/YYYY'), ? "
                    + ", ?, ?, ? "
                    + ", TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD'), ? "
                    + ") ";
            

            stmt = conn.prepareStatement(sql);

           stmt.setString(1, valueObject.getAftTkhtx());
            stmt.setString(2, valueObject.getAftTkhtx());
            //stmt.setString(3, valueObject.getAftNegri());
            //stmt.setString(4, valueObject.getAftMajcw());
            //stmt.setString(5, valueObject.getAftPtjpk());
            //stmt.setString(6, valueObject.getAftBiapg());
            //stmt.setString(7, valueObject.getAftPjkak());
            //stmt.setString(8, valueObject.getAftObjek());
            stmt.setString(3, valueObject.getAftStkod());
            stmt.setString(4, valueObject.getAftAmaun());
            stmt.setString(5, valueObject.getAftSdrcr());
            stmt.setString(6, valueObject.getAftSsiri());
            stmt.setString(7, valueObject.getAftNsiri());
            stmt.setString(8, valueObject.getAftTkhtx());
            stmt.setString(9, valueObject.getAftModin());
            stmt.setString(10, valueObject.getAftOnama());
            stmt.setString(11, valueObject.getAftStatf());
            stmt.setString(12, valueObject.getAftKwkod());
            //stmt.setString(11, valueObject.getAftTarkh());
            stmt.setString(13, valueObject.getAftKdgrp());
            
            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount != 1) {
                //System.out.println("PrimaryKey Error when updating DB!");
                throw new SQLException("PrimaryKey Error when updating DB!");
            }

        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }

    }

    /**
     * save-method. This method will save the current state of valueObject to
     * database. Save can not be used to create new instances in database, so
     * upper layer must make sure that the primary-key is correctly specified.
     * Primary-key will indicate which instance is going to be updated in
     * database. If save can not find matching row, NotFoundException will be
     * thrown.
     *
     * @param conn This method requires working database connection.
     * @param valueObject This parameter contains the class instance to be
     * saved. Primary-key field must be set for this to work properly.
     */
    public void save(Connection conn, Aftran valueObject)
            throws NotFoundException, SQLException {

        String sql = "UPDATE SSLA.AFTRAN SET AFT_BULAN = ?, AFT_NEGRI = ?, AFT_MAJCW = ?, "
                + "AFT_PTJPK = ?, AFT_BIAPG = ?, AFT_PJKAK = ?, "
                + "AFT_OBJEK = ?, AFT_STKOD = ?, AFT_AMAUN = ?, "
                + "AFT_SDRCR = ?, AFT_SSIRI = ?, AFT_NSIRI = ?, "
                + "AFT_TKHTX = ?, AFT_MODIN = ?, AFT_ONAMA = ?, "
                + "AFT_STATF = ?, AFT_KWKOD = ?, AFT_TARKH = ?, "
                + "AFT_KDGRP = ? WHERE (AFT_TAHUN = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, valueObject.getAftBulan());
            stmt.setString(2, valueObject.getAftNegri());
            stmt.setString(3, valueObject.getAftMajcw());
            stmt.setString(4, valueObject.getAftPtjpk());
            stmt.setString(5, valueObject.getAftBiapg());
            stmt.setString(6, valueObject.getAftPjkak());
            stmt.setString(7, valueObject.getAftObjek());
            stmt.setString(8, valueObject.getAftStkod());
            stmt.setString(9, valueObject.getAftAmaun());
            stmt.setString(10, valueObject.getAftSdrcr());
            stmt.setString(11, valueObject.getAftSsiri());
            stmt.setString(12, valueObject.getAftNsiri());
            stmt.setString(13, valueObject.getAftTkhtx());
            stmt.setString(14, valueObject.getAftModin());
            stmt.setString(15, valueObject.getAftOnama());
            stmt.setString(16, valueObject.getAftStatf());
            stmt.setString(17, valueObject.getAftKwkod());
            stmt.setString(18, valueObject.getAftTarkh());
            stmt.setString(19, valueObject.getAftKdgrp());

            stmt.setString(20, valueObject.getAftTahun());

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                //System.out.println("Object could not be saved! (PrimaryKey not found)");
                throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
            }
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    /**
     * delete-method. This method will remove the information from database as
     * identified by by primary-key in supplied valueObject. Once valueObject
     * has been deleted it can not be restored by calling save. Restoring can
     * only be done using create method but if database is using automatic
     * surrogate-keys, the resulting object will have different primary-key than
     * what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn This method requires working database connection.
     * @param valueObject This parameter contains the class instance to be
     * deleted. Primary-key field must be set for this to work properly.
     */
    public void delete(Connection conn, Aftran valueObject)
            throws NotFoundException, SQLException {

        if (valueObject.getAftTahun() == null) {
            //System.out.println("Can not delete without Primary-Key!");
            throw new NotFoundException("Can not delete without Primary-Key!");
        }

        String sql = "DELETE FROM SSLA.AFTRAN WHERE (AFT_TAHUN = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, valueObject.getAftTahun());

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                //System.out.println("Object could not be deleted (PrimaryKey not found)");
                throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
            }
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    /**
     * deleteAll-method. This method will remove all information from the table
     * that matches this Dao and ValueObject couple. This should be the most
     * efficient way to clear table. Once deleteAll has been called, no
     * valueObject that has been created before can be restored by calling save.
     * Restoring can only be done using create method but if database is using
     * automatic surrogate-keys, the resulting object will have different
     * primary-key than what it was in the deleted object. (Note, the
     * implementation of this method should be different with different DB
     * backends.)
     *
     * @param conn This method requires working database connection.
     */
    public void deleteAll(Connection conn) throws SQLException {

        String sql = "DELETE FROM SSLA.AFTRAN";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            int rowcount = databaseUpdate(conn, stmt);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    /**
     * coutAll-method. This method will return the number of all rows from table
     * that matches this Dao. The implementation will simply execute "select
     * count(primarykey) from table". If table is empty, the return value is 0.
     * This method should be used before calling loadAll, to make sure table has
     * not too many rows.
     *
     * @param conn This method requires working database connection.
     */
    public int countAll(Connection conn) throws SQLException {

        String sql = "SELECT count(*) FROM SSLA.AFTRAN";
        PreparedStatement stmt = null;
        ResultSet result = null;
        int allRows = 0;

        try {
            stmt = conn.prepareStatement(sql);
            result = stmt.executeQuery();

            if (result.next()) {
                allRows = result.getInt(1);
            }
        } finally {
            if (result != null) {
                result.close();
            }
            if (stmt != null) {
                stmt.close();
            }
        }
        return allRows;
    }

    /**
     * searchMatching-Method. This method provides searching capability to get
     * matching valueObjects from database. It works by searching all objects
     * that match permanent instance variables of given object. Upper layer
     * should use this by setting some parameters in valueObject and then call
     * searchMatching. The result will be 0-N objects in a List, all matching
     * those criteria you specified. Those instance-variables that have NULL
     * values are excluded in search-criteria.
     *
     * @param conn This method requires working database connection.
     * @param valueObject This parameter contains the class instance where
     * search will be based. Primary-key field should not be set.
     */
    public List searchMatching(Connection conn, Aftran valueObject) throws SQLException {

        List searchResults;

        boolean first = true;
        StringBuffer sql = new StringBuffer("SELECT * FROM SSLA.AFTRAN WHERE 1=1 ");

        if (valueObject.getAftTahun() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_TAHUN LIKE '").append(valueObject.getAftTahun()).append("%' ");
        }

        if (valueObject.getAftBulan() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_BULAN LIKE '").append(valueObject.getAftBulan()).append("%' ");
        }

        if (valueObject.getAftNegri() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_NEGRI LIKE '").append(valueObject.getAftNegri()).append("%' ");
        }

        if (valueObject.getAftMajcw() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_MAJCW LIKE '").append(valueObject.getAftMajcw()).append("%' ");
        }

        if (valueObject.getAftPtjpk() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_PTJPK LIKE '").append(valueObject.getAftPtjpk()).append("%' ");
        }

        if (valueObject.getAftBiapg() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_BIAPG LIKE '").append(valueObject.getAftBiapg()).append("%' ");
        }

        if (valueObject.getAftPjkak() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_PJKAK LIKE '").append(valueObject.getAftPjkak()).append("%' ");
        }

        if (valueObject.getAftObjek() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_OBJEK LIKE '").append(valueObject.getAftObjek()).append("%' ");
        }

        if (valueObject.getAftStkod() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_STKOD LIKE '").append(valueObject.getAftStkod()).append("%' ");
        }

        if (valueObject.getAftAmaun() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_AMAUN LIKE '").append(valueObject.getAftAmaun()).append("%' ");
        }

        if (valueObject.getAftSdrcr() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_SDRCR LIKE '").append(valueObject.getAftSdrcr()).append("%' ");
        }

        if (valueObject.getAftSsiri() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_SSIRI LIKE '").append(valueObject.getAftSsiri()).append("%' ");
        }

        if (valueObject.getAftNsiri() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_NSIRI LIKE '").append(valueObject.getAftNsiri()).append("%' ");
        }

        if (valueObject.getAftTkhtx() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_TKHTX LIKE '").append(valueObject.getAftTkhtx()).append("%' ");
        }

        if (valueObject.getAftModin() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_MODIN LIKE '").append(valueObject.getAftModin()).append("%' ");
        }

        if (valueObject.getAftOnama() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_ONAMA LIKE '").append(valueObject.getAftOnama()).append("%' ");
        }

        if (valueObject.getAftStatf() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_STATF LIKE '").append(valueObject.getAftStatf()).append("%' ");
        }

        if (valueObject.getAftKwkod() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_KWKOD LIKE '").append(valueObject.getAftKwkod()).append("%' ");
        }

        if (valueObject.getAftTarkh() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_TARKH LIKE '").append(valueObject.getAftTarkh()).append("%' ");
        }

        if (valueObject.getAftKdgrp() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND AFT_KDGRP LIKE '").append(valueObject.getAftKdgrp()).append("%' ");
        }

        sql.append("ORDER BY AFT_TAHUN ASC ");

          // Prevent accidential full table results.
        // Use loadAll if all rows must be returned.
        if (first) {
            searchResults = new ArrayList();
        } else {
            searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));
        }

        return searchResults;
    }

    /**
     * getDaogenVersion will return information about generator which created
     * these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

    /**
     * databaseUpdate-method. This method is a helper method for internal use.
     * It will execute all database handling that will change the information in
     * tables. SELECT queries will not be executed here however. The return
     * value indicates how many rows were affected. This method will also make
     * sure that if cache is used, it will reset when data changes.
     *
     * @param conn This method requires working database connection.
     * @param stmt This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

        int result = stmt.executeUpdate();

        return result;
    }

    /**
     * databaseQuery-method. This method is a helper method for internal use. It
     * will execute all database queries that will return only one row. The
     * resultset will be converted to valueObject. If no rows were found,
     * NotFoundException will be thrown.
     *
     * @param conn This method requires working database connection.
     * @param stmt This parameter contains the SQL statement to be excuted.
     * @param valueObject Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt, Aftran valueObject)
            throws NotFoundException, SQLException {

        ResultSet result = null;

        try {
            result = stmt.executeQuery();

            if (result.next()) {

                valueObject.setAftTahun(result.getString("AFT_TAHUN"));
                valueObject.setAftBulan(result.getString("AFT_BULAN"));
                valueObject.setAftNegri(result.getString("AFT_NEGRI"));
                valueObject.setAftMajcw(result.getString("AFT_MAJCW"));
                valueObject.setAftPtjpk(result.getString("AFT_PTJPK"));
                valueObject.setAftBiapg(result.getString("AFT_BIAPG"));
                valueObject.setAftPjkak(result.getString("AFT_PJKAK"));
                valueObject.setAftObjek(result.getString("AFT_OBJEK"));
                valueObject.setAftStkod(result.getString("AFT_STKOD"));
                valueObject.setAftAmaun(result.getString("AFT_AMAUN"));
                valueObject.setAftSdrcr(result.getString("AFT_SDRCR"));
                valueObject.setAftSsiri(result.getString("AFT_SSIRI"));
                valueObject.setAftNsiri(result.getString("AFT_NSIRI"));
                valueObject.setAftTkhtx(result.getString("AFT_TKHTX"));
                valueObject.setAftModin(result.getString("AFT_MODIN"));
                valueObject.setAftOnama(result.getString("AFT_ONAMA"));
                valueObject.setAftStatf(result.getString("AFT_STATF"));
                valueObject.setAftKwkod(result.getString("AFT_KWKOD"));
                valueObject.setAftTarkh(result.getString("AFT_TARKH"));
                valueObject.setAftKdgrp(result.getString("AFT_KDGRP"));

            } else {
                //System.out.println("Aftran Object Not Found!");
                throw new NotFoundException("Aftran Object Not Found!");
            }
        } finally {
            if (result != null) {
                result.close();
            }
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    /**
     * databaseQuery-method. This method is a helper method for internal use. It
     * will execute all database queries that will return multiple rows. The
     * resultset will be converted to the List of valueObjects. If no rows were
     * found, an empty List will be returned.
     *
     * @param conn This method requires working database connection.
     * @param stmt This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException {

        ArrayList searchResults = new ArrayList();
        ResultSet result = null;

        try {
            result = stmt.executeQuery();

            while (result.next()) {
                Aftran temp = createValueObject();

                temp.setAftTahun(result.getString("AFT_TAHUN"));
                temp.setAftBulan(result.getString("AFT_BULAN"));
                temp.setAftNegri(result.getString("AFT_NEGRI"));
                temp.setAftMajcw(result.getString("AFT_MAJCW"));
                temp.setAftPtjpk(result.getString("AFT_PTJPK"));
                temp.setAftBiapg(result.getString("AFT_BIAPG"));
                temp.setAftPjkak(result.getString("AFT_PJKAK"));
                temp.setAftObjek(result.getString("AFT_OBJEK"));
                temp.setAftStkod(result.getString("AFT_STKOD"));
                temp.setAftAmaun(result.getString("AFT_AMAUN"));
                temp.setAftSdrcr(result.getString("AFT_SDRCR"));
                temp.setAftSsiri(result.getString("AFT_SSIRI"));
                temp.setAftNsiri(result.getString("AFT_NSIRI"));
                temp.setAftTkhtx(result.getString("AFT_TKHTX"));
                temp.setAftModin(result.getString("AFT_MODIN"));
                temp.setAftOnama(result.getString("AFT_ONAMA"));
                temp.setAftStatf(result.getString("AFT_STATF"));
                temp.setAftKwkod(result.getString("AFT_KWKOD"));
                temp.setAftTarkh(result.getString("AFT_TARKH"));
                temp.setAftKdgrp(result.getString("AFT_KDGRP"));

                searchResults.add(temp);
            }

        } finally {
            if (result != null) {
                result.close();
            }
            if (stmt != null) {
                stmt.close();
            }
        }

        return (List) searchResults;
    }

}
