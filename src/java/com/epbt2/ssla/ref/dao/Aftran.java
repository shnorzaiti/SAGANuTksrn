package com.epbt2.ssla.ref.dao;


import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * Aftran Value Object.
  * This class is value object representing database table SSLA.AFTRAN
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class Aftran implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private String aftTahun;
    private String aftBulan;
    private String aftNegri;
    private String aftMajcw;
    private String aftPtjpk;
    private String aftBiapg;
    private String aftPjkak;
    private String aftObjek;
    private String aftStkod;
    private String aftAmaun;
    private String aftSdrcr;
    private String aftSsiri;
    private String aftNsiri;
    private String aftTkhtx;
    private String aftModin;
    private String aftOnama;
    private String aftStatf;
    private String aftKwkod;
    private String aftTarkh;
    private String aftKdgrp;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public Aftran () {

    }

    public Aftran (String aftTahunIn) {

          this.aftTahun = aftTahunIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public String getAftTahun() {
          return this.aftTahun;
    }
    public void setAftTahun(String aftTahunIn) {
          this.aftTahun = aftTahunIn;
    }

    public String getAftBulan() {
          return this.aftBulan;
    }
    public void setAftBulan(String aftBulanIn) {
          this.aftBulan = aftBulanIn;
    }

    public String getAftNegri() {
          return this.aftNegri;
    }
    public void setAftNegri(String aftNegriIn) {
          this.aftNegri = aftNegriIn;
    }

    public String getAftMajcw() {
          return this.aftMajcw;
    }
    public void setAftMajcw(String aftMajcwIn) {
          this.aftMajcw = aftMajcwIn;
    }

    public String getAftPtjpk() {
          return this.aftPtjpk;
    }
    public void setAftPtjpk(String aftPtjpkIn) {
          this.aftPtjpk = aftPtjpkIn;
    }

    public String getAftBiapg() {
          return this.aftBiapg;
    }
    public void setAftBiapg(String aftBiapgIn) {
          this.aftBiapg = aftBiapgIn;
    }

    public String getAftPjkak() {
          return this.aftPjkak;
    }
    public void setAftPjkak(String aftPjkakIn) {
          this.aftPjkak = aftPjkakIn;
    }

    public String getAftObjek() {
          return this.aftObjek;
    }
    public void setAftObjek(String aftObjekIn) {
          this.aftObjek = aftObjekIn;
    }

    public String getAftStkod() {
          return this.aftStkod;
    }
    public void setAftStkod(String aftStkodIn) {
          this.aftStkod = aftStkodIn;
    }

    public String getAftAmaun() {
          return this.aftAmaun;
    }
    public void setAftAmaun(String aftAmaunIn) {
          this.aftAmaun = aftAmaunIn;
    }

    public String getAftSdrcr() {
          return this.aftSdrcr;
    }
    public void setAftSdrcr(String aftSdrcrIn) {
          this.aftSdrcr = aftSdrcrIn;
    }

    public String getAftSsiri() {
          return this.aftSsiri;
    }
    public void setAftSsiri(String aftSsiriIn) {
          this.aftSsiri = aftSsiriIn;
    }

    public String getAftNsiri() {
          return this.aftNsiri;
    }
    public void setAftNsiri(String aftNsiriIn) {
          this.aftNsiri = aftNsiriIn;
    }

    public String getAftTkhtx() {
          return this.aftTkhtx;
    }
    public void setAftTkhtx(String aftTkhtxIn) {
          this.aftTkhtx = aftTkhtxIn;
    }

    public String getAftModin() {
          return this.aftModin;
    }
    public void setAftModin(String aftModinIn) {
          this.aftModin = aftModinIn;
    }

    public String getAftOnama() {
          return this.aftOnama;
    }
    public void setAftOnama(String aftOnamaIn) {
          this.aftOnama = aftOnamaIn;
    }

    public String getAftStatf() {
          return this.aftStatf;
    }
    public void setAftStatf(String aftStatfIn) {
          this.aftStatf = aftStatfIn;
    }

    public String getAftKwkod() {
          return this.aftKwkod;
    }
    public void setAftKwkod(String aftKwkodIn) {
          this.aftKwkod = aftKwkodIn;
    }

    public String getAftTarkh() {
          return this.aftTarkh;
    }
    public void setAftTarkh(String aftTarkhIn) {
          this.aftTarkh = aftTarkhIn;
    }

    public String getAftKdgrp() {
          return this.aftKdgrp;
    }
    public void setAftKdgrp(String aftKdgrpIn) {
          this.aftKdgrp = aftKdgrpIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(String aftTahunIn,
          String aftBulanIn,
          String aftNegriIn,
          String aftMajcwIn,
          String aftPtjpkIn,
          String aftBiapgIn,
          String aftPjkakIn,
          String aftObjekIn,
          String aftStkodIn,
          String aftAmaunIn,
          String aftSdrcrIn,
          String aftSsiriIn,
          String aftNsiriIn,
          String aftTkhtxIn,
          String aftModinIn,
          String aftOnamaIn,
          String aftStatfIn,
          String aftKwkodIn,
          String aftTarkhIn,
          String aftKdgrpIn) {
          this.aftTahun = aftTahunIn;
          this.aftBulan = aftBulanIn;
          this.aftNegri = aftNegriIn;
          this.aftMajcw = aftMajcwIn;
          this.aftPtjpk = aftPtjpkIn;
          this.aftBiapg = aftBiapgIn;
          this.aftPjkak = aftPjkakIn;
          this.aftObjek = aftObjekIn;
          this.aftStkod = aftStkodIn;
          this.aftAmaun = aftAmaunIn;
          this.aftSdrcr = aftSdrcrIn;
          this.aftSsiri = aftSsiriIn;
          this.aftNsiri = aftNsiriIn;
          this.aftTkhtx = aftTkhtxIn;
          this.aftModin = aftModinIn;
          this.aftOnama = aftOnamaIn;
          this.aftStatf = aftStatfIn;
          this.aftKwkod = aftKwkodIn;
          this.aftTarkh = aftTarkhIn;
          this.aftKdgrp = aftKdgrpIn;
    }


    /** 
     * hasEqualMapping-method will compare two Aftran instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(Aftran valueObject) {

          if (this.aftTahun == null) {
                    if (valueObject.getAftTahun() != null)
                           return(false);
          } else if (!this.aftTahun.equals(valueObject.getAftTahun())) {
                    return(false);
          }
          if (this.aftBulan == null) {
                    if (valueObject.getAftBulan() != null)
                           return(false);
          } else if (!this.aftBulan.equals(valueObject.getAftBulan())) {
                    return(false);
          }
          if (this.aftNegri == null) {
                    if (valueObject.getAftNegri() != null)
                           return(false);
          } else if (!this.aftNegri.equals(valueObject.getAftNegri())) {
                    return(false);
          }
          if (this.aftMajcw == null) {
                    if (valueObject.getAftMajcw() != null)
                           return(false);
          } else if (!this.aftMajcw.equals(valueObject.getAftMajcw())) {
                    return(false);
          }
          if (this.aftPtjpk == null) {
                    if (valueObject.getAftPtjpk() != null)
                           return(false);
          } else if (!this.aftPtjpk.equals(valueObject.getAftPtjpk())) {
                    return(false);
          }
          if (this.aftBiapg == null) {
                    if (valueObject.getAftBiapg() != null)
                           return(false);
          } else if (!this.aftBiapg.equals(valueObject.getAftBiapg())) {
                    return(false);
          }
          if (this.aftPjkak == null) {
                    if (valueObject.getAftPjkak() != null)
                           return(false);
          } else if (!this.aftPjkak.equals(valueObject.getAftPjkak())) {
                    return(false);
          }
          if (this.aftObjek == null) {
                    if (valueObject.getAftObjek() != null)
                           return(false);
          } else if (!this.aftObjek.equals(valueObject.getAftObjek())) {
                    return(false);
          }
          if (this.aftStkod == null) {
                    if (valueObject.getAftStkod() != null)
                           return(false);
          } else if (!this.aftStkod.equals(valueObject.getAftStkod())) {
                    return(false);
          }
          if (this.aftAmaun == null) {
                    if (valueObject.getAftAmaun() != null)
                           return(false);
          } else if (!this.aftAmaun.equals(valueObject.getAftAmaun())) {
                    return(false);
          }
          if (this.aftSdrcr == null) {
                    if (valueObject.getAftSdrcr() != null)
                           return(false);
          } else if (!this.aftSdrcr.equals(valueObject.getAftSdrcr())) {
                    return(false);
          }
          if (this.aftSsiri == null) {
                    if (valueObject.getAftSsiri() != null)
                           return(false);
          } else if (!this.aftSsiri.equals(valueObject.getAftSsiri())) {
                    return(false);
          }
          if (this.aftNsiri == null) {
                    if (valueObject.getAftNsiri() != null)
                           return(false);
          } else if (!this.aftNsiri.equals(valueObject.getAftNsiri())) {
                    return(false);
          }
          if (this.aftTkhtx == null) {
                    if (valueObject.getAftTkhtx() != null)
                           return(false);
          } else if (!this.aftTkhtx.equals(valueObject.getAftTkhtx())) {
                    return(false);
          }
          if (this.aftModin == null) {
                    if (valueObject.getAftModin() != null)
                           return(false);
          } else if (!this.aftModin.equals(valueObject.getAftModin())) {
                    return(false);
          }
          if (this.aftOnama == null) {
                    if (valueObject.getAftOnama() != null)
                           return(false);
          } else if (!this.aftOnama.equals(valueObject.getAftOnama())) {
                    return(false);
          }
          if (this.aftStatf == null) {
                    if (valueObject.getAftStatf() != null)
                           return(false);
          } else if (!this.aftStatf.equals(valueObject.getAftStatf())) {
                    return(false);
          }
          if (this.aftKwkod == null) {
                    if (valueObject.getAftKwkod() != null)
                           return(false);
          } else if (!this.aftKwkod.equals(valueObject.getAftKwkod())) {
                    return(false);
          }
          if (this.aftTarkh == null) {
                    if (valueObject.getAftTarkh() != null)
                           return(false);
          } else if (!this.aftTarkh.equals(valueObject.getAftTarkh())) {
                    return(false);
          }
          if (this.aftKdgrp == null) {
                    if (valueObject.getAftKdgrp() != null)
                           return(false);
          } else if (!this.aftKdgrp.equals(valueObject.getAftKdgrp())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass Aftran, mapping to table SSLA.AFTRAN\n");
        out.append("Persistent attributes: \n"); 
        out.append("aftTahun = " + this.aftTahun + "\n"); 
        out.append("aftBulan = " + this.aftBulan + "\n"); 
        out.append("aftNegri = " + this.aftNegri + "\n"); 
        out.append("aftMajcw = " + this.aftMajcw + "\n"); 
        out.append("aftPtjpk = " + this.aftPtjpk + "\n"); 
        out.append("aftBiapg = " + this.aftBiapg + "\n"); 
        out.append("aftPjkak = " + this.aftPjkak + "\n"); 
        out.append("aftObjek = " + this.aftObjek + "\n"); 
        out.append("aftStkod = " + this.aftStkod + "\n"); 
        out.append("aftAmaun = " + this.aftAmaun + "\n"); 
        out.append("aftSdrcr = " + this.aftSdrcr + "\n"); 
        out.append("aftSsiri = " + this.aftSsiri + "\n"); 
        out.append("aftNsiri = " + this.aftNsiri + "\n"); 
        out.append("aftTkhtx = " + this.aftTkhtx + "\n"); 
        out.append("aftModin = " + this.aftModin + "\n"); 
        out.append("aftOnama = " + this.aftOnama + "\n"); 
        out.append("aftStatf = " + this.aftStatf + "\n"); 
        out.append("aftKwkod = " + this.aftKwkod + "\n"); 
        out.append("aftTarkh = " + this.aftTarkh + "\n"); 
        out.append("aftKdgrp = " + this.aftKdgrp + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        Aftran cloned = new Aftran();

        if (this.aftTahun != null)
             cloned.setAftTahun(new String(this.aftTahun)); 
        if (this.aftBulan != null)
             cloned.setAftBulan(new String(this.aftBulan)); 
        if (this.aftNegri != null)
             cloned.setAftNegri(new String(this.aftNegri)); 
        if (this.aftMajcw != null)
             cloned.setAftMajcw(new String(this.aftMajcw)); 
        if (this.aftPtjpk != null)
             cloned.setAftPtjpk(new String(this.aftPtjpk)); 
        if (this.aftBiapg != null)
             cloned.setAftBiapg(new String(this.aftBiapg)); 
        if (this.aftPjkak != null)
             cloned.setAftPjkak(new String(this.aftPjkak)); 
        if (this.aftObjek != null)
             cloned.setAftObjek(new String(this.aftObjek)); 
        if (this.aftStkod != null)
             cloned.setAftStkod(new String(this.aftStkod)); 
        if (this.aftAmaun != null)
             cloned.setAftAmaun(new String(this.aftAmaun)); 
        if (this.aftSdrcr != null)
             cloned.setAftSdrcr(new String(this.aftSdrcr)); 
        if (this.aftSsiri != null)
             cloned.setAftSsiri(new String(this.aftSsiri)); 
        if (this.aftNsiri != null)
             cloned.setAftNsiri(new String(this.aftNsiri)); 
        if (this.aftTkhtx != null)
             cloned.setAftTkhtx(new String(this.aftTkhtx)); 
        if (this.aftModin != null)
             cloned.setAftModin(new String(this.aftModin)); 
        if (this.aftOnama != null)
             cloned.setAftOnama(new String(this.aftOnama)); 
        if (this.aftStatf != null)
             cloned.setAftStatf(new String(this.aftStatf)); 
        if (this.aftKwkod != null)
             cloned.setAftKwkod(new String(this.aftKwkod)); 
        if (this.aftTarkh != null)
             cloned.setAftTarkh(new String(this.aftTarkh)); 
        if (this.aftKdgrp != null)
             cloned.setAftKdgrp(new String(this.aftKdgrp)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}